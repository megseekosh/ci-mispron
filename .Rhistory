s(Time, WordGroup, by=Condition.ord, bs='fs',  m=1),
data=.,
rho=r1_ci,
method="fREML",
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
# Wood recommends backwards model selection/parameter removal based
# on terms with the highest p-values
# we start with the most complex model:
gfta_ppvt_ctc_model_dropped <- ci_kids %>%
bam(elog ~     Condition.ord +
s(Time, by=Condition.ord,k=15) +
#s(GFTA_Standard, k=18) +
#s(Time, by=GFTA_Standard) +
te(Time,GFTA_Standard,by=Condition.ord, k=18) +
s(PPVT_GSV,k=25) +
#s(Time, by=PPVT_GSV) +
te(Time,PPVT_GSV,by=Condition.ord, k=22) +
s(CTC_hourly,k=22) +
#s(Time, by=CTC_hourly,k=15) +
te(Time,CTC_hourly,by=Condition.ord, k=25) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, WordGroup, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1) +
s(Time, WordGroup, by=Condition.ord, bs='fs',  m=1),
data=.,
rho=r1_ci,
method="fREML",
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
# Wood recommends backwards model selection/parameter removal based
# on terms with the highest p-values
# we start with the most complex model:
gfta_ppvt_ctc_model_dropped <- ci_kids %>%
bam(elog ~     Condition.ord +
s(Time, by=Condition.ord,k=15) +
#s(GFTA_Standard, k=18) +
#s(Time, by=GFTA_Standard) +
te(Time,GFTA_Standard,by=Condition.ord, k=18) +
s(PPVT_GSV,k=22) +
#s(Time, by=PPVT_GSV) +
te(Time,PPVT_GSV,by=Condition.ord, k=25) +
s(CTC_hourly,k=22) +
#s(Time, by=CTC_hourly,k=15) +
te(Time,CTC_hourly,by=Condition.ord, k=25) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, WordGroup, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1) +
s(Time, WordGroup, by=Condition.ord, bs='fs',  m=1),
data=.,
rho=r1_ci,
method="fREML",
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
# Wood recommends backwards model selection/parameter removal based
# on terms with the highest p-values
# we start with the most complex model:
gfta_ppvt_ctc_model_dropped <- ci_kids %>%
bam(elog ~     Condition.ord +
s(Time, by=Condition.ord,k=15) +
#s(GFTA_Standard, k=18) +
#s(Time, by=GFTA_Standard) +
te(Time,GFTA_Standard,by=Condition.ord, k=18) +
s(PPVT_GSV,k=22) +
#s(Time, by=PPVT_GSV) +
te(Time,PPVT_GSV,by=Condition.ord, k=22) +
s(CTC_hourly,k=25) +
#s(Time, by=CTC_hourly,k=15) +
te(Time,CTC_hourly,by=Condition.ord, k=25) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, WordGroup, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1) +
s(Time, WordGroup, by=Condition.ord, bs='fs',  m=1),
data=.,
rho=r1_ci,
method="fREML",
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
# Wood recommends backwards model selection/parameter removal based
# on terms with the highest p-values
# we start with the most complex model:
gfta_ppvt_ctc_model_dropped <- ci_kids %>%
bam(elog ~     Condition.ord +
s(Time, by=Condition.ord,k=15) +
#s(GFTA_Standard, k=18) +
#s(Time, by=GFTA_Standard) +
te(Time,GFTA_Standard,by=Condition.ord, k=18) +
s(PPVT_GSV,k=22) +
#s(Time, by=PPVT_GSV) +
te(Time,PPVT_GSV,by=Condition.ord, k=22) +
s(CTC_hourly,k=28) +
#s(Time, by=CTC_hourly,k=15) +
te(Time,CTC_hourly,by=Condition.ord, k=25) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, WordGroup, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1) +
s(Time, WordGroup, by=Condition.ord, bs='fs',  m=1),
data=.,
rho=r1_ci,
method="fREML",
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
# Wood recommends backwards model selection/parameter removal based
# on terms with the highest p-values
# we start with the most complex model:
gfta_ppvt_ctc_model_dropped <- ci_kids %>%
bam(elog ~     Condition.ord +
s(Time, by=Condition.ord,k=15) +
#s(GFTA_Standard, k=18) +
#s(Time, by=GFTA_Standard) +
te(Time,GFTA_Standard,by=Condition.ord, k=18) +
s(PPVT_GSV,k=22) +
#s(Time, by=PPVT_GSV) +
te(Time,PPVT_GSV,by=Condition.ord, k=22) +
s(CTC_hourly,k=25) +
#s(Time, by=CTC_hourly,k=15) +
te(Time,CTC_hourly,by=Condition.ord, k=25) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, WordGroup, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1) +
s(Time, WordGroup, by=Condition.ord, bs='fs',  m=1),
data=.,
rho=r1_ci,
method="fREML",
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
# Wood recommends backwards model selection/parameter removal based
# on terms with the highest p-values
# we start with the most complex model:
gfta_ppvt_ctc_model_dropped <- ci_kids %>%
bam(elog ~     Condition.ord +
s(Time, by=Condition.ord,k=15) +
#s(GFTA_Standard, k=18) +
#s(Time, by=GFTA_Standard) +
te(Time,GFTA_Standard,by=Condition.ord, k=18) +
s(PPVT_GSV,k=22) +
#s(Time, by=PPVT_GSV) +
te(Time,PPVT_GSV,by=Condition.ord, k=22) +
s(CTC_hourly,k=25) +
#s(Time, by=CTC_hourly,k=15) +
te(Time,CTC_hourly,by=Condition.ord, k=25) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, WordGroup, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1) +
s(Time, WordGroup, by=Condition.ord, bs='fs',  m=1),
data=.,
rho=r1_ci,
method="fREML",
family="scat", # we have residuals with heavy tails
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
gam.check(gfta_ppvt_ctc_model_dropped)
gfta_ppvt_ctc_model_dropped_summary <- summary(gfta_ppvt_ctc_model_dropped) # we identify the next parameter with highest p-value
library("knitr")
library('tidyverse')
library('Matching')
library('itsadug')
library('mgcv')
library('Matching')
library('ggplot2')
library('gratia')
# read in data
all_kids <- read.csv('CI_mispron/combined_data.csv') %>%
mutate(elog=as.numeric(elog)) %>%
mutate(Time=as.numeric(Time),
Condition.ord=as.ordered(Condition),
ChildStudyID=as.factor(ChildStudyID),
WordGroup=as.factor(WordGroup)) %>%
arrange(Time)
View(all_kids2)
library("knitr")
library('tidyverse')
library('itsadug')
library('mgcv')
library('ggplot2')
library('tidymv')
library('cowplot')
all_kids <- read.csv('./matched_kids.csv') %>% # contains the N=68 kids who are chronologically age-matched
#read.csv('./combined_data.csv') %>% # combined data contains the N=45 kids who have LENA
filter(Condition!='nonsense') %>% # only going to look at difference between MP and real
mutate(elog=as.numeric(elog)) %>%
mutate(Time=as.numeric(Time),
Condition.ord=as.ordered(Condition),
Group.ord=as.ordered(Group),
ChildStudyID=as.factor(ChildStudyID),
WordGroup=as.factor(WordGroup)) %>%
arrange(Time)
all_kids$start.event <- all_kids$Time == 300 # mark the beginning of each speaker's trajectory;
# make sure the data to configure autocorrelation are properly ordered and classified
all_kids2 <- all_kids %>%
arrange(ChildStudyID, Group, TargetWord, Time) %>%
mutate(WordGroup=as.factor(WordGroup),
TargetWord=as.factor(TargetWord),
ChildStudyID=as.factor(ChildStudyID),
Group=as.factor(Group))
# fit a model with the data properly ordered
m1_all <- bam(elog ~ s(Time, bs="fs") +
s(Time, by=TargetWord, bs='fs'),
data=all_kids2, method="ML")
m_acf_all<- acf_resid(m1_all) # plot the autocorrelation and take a look at correlation between timepoints - yikes!
r1_all <- start_value_rho(m1_all) # first we calculate rho from the original model (wo ran. structure)
m_AR1_all <- bam(elog ~   s(Time, bs="fs") +
s(Time, by=TargetWord, bs="fs"),
data=all_kids2, method="fREML",
rho=r1_all, AR.start=start.event)
# we can plot the improvement here:
m_acf_rmv_all <- acf_resid(m_AR1_all) # took care of the problem!
# we have to create *two* reference levels: one for children with CIs and one for children with TH
# Unlike a binary difference smooth, an ordered model doesn't lump intercepts and smooths together
# and I'd like to be able to tease them apart in these models
all_kids2$THReal0 <- as.ordered(all_kids2$Group=='NormalHearing' & all_kids2$Condition=='real')
contrasts(all_kids2$THReal0) <- "contr.treatment" # contrast coding
all_kids2$CIReal0 <- as.ordered(all_kids2$Group=='CochlearImplant' & all_kids2$Condition=='real')
contrasts(all_kids2$CIReal0) <- "contr.treatment"
# first we create a *single* binary difference smooth, just for word condition,
# group is not included here
all_kids2$IsReal <- (all_kids2$Condition=='real')*1
# then we additionally create a binary difference smooth of word*condition
all_kids2$IsTHReal <- (all_kids2$Group=='NormalHearing' & all_kids2$Condition=='real')*1
all_kids2$IsCIReal <- (all_kids2$Group=='CochlearImplant' & all_kids2$Condition=='real')*1
diff_model <- readRDS("../models/diff-model.Rdata")
gamtabs(diff_model,
caption = "Predicting the difference between proportion of looks to the target image by word condition and hearing status.",
label="Table 1",
pnames = c("Intercept", "Typical Hearing"), # the parametric terms
snames = c("s(Time,Cochlear Implant)","s(Time,Typical Hearing)",
"s(Time,Real Word)","s(Time,Typical Hearing*Real Word)",
"s(Time, Child)","s(Time,Item)")
)
interact_model_plot <-
get_gam_predictions(interact_model, # get the dataframe with fit and s.e. of fit
Time,
split = list(GroupCondition = c("Group", "Condition")),
exclude_random = TRUE) %>%
mutate(Group=recode(Group, "CochlearImplant"="Cochlear Implant", "NormalHearing" = "Typical Hearing"),
Condition = recode(Condition, "MP"="Mispronunciation", "real"="Correct pronunciation")) %>%
ggplot(aes(Time,elog)) +
geom_line(aes(color=Condition, linetype=Group),size=2) +
scale_linetype_manual(values=c(1,3)) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper, fill=Condition, group = .idx), alpha=0.3) +
xlab("Time (ms)")  +
ylab("Elog") +
scale_x_continuous(breaks = c(300,600,900,1200,1500,1800))+
theme(axis.text = element_text(face="bold", size=12),
axis.title = element_text(face="bold", size=15),
legend.title = element_text(face="bold",size=15))
interact_model <- readRDS("../models/interact-model.Rdata")
diff_model_summary <- readRDS("../models/diff-model-summary.Rdata")
diff_model <- readRDS("../models/diff-model.Rdata")
ci_diff <- get_smooths_difference(interact_model,
Time,
list(GroupCondition = c("CochlearImplant.real", "CochlearImplant.MP")),
exclude_random = TRUE) %>%
ggplot(aes(Time, difference, group = group)) +
geom_hline(aes(yintercept=0), color='black',lty=2,size=1.5) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper, fill = sig_diff), alpha=.3) +
geom_line(aes(color=sig_diff), size=2) +
scale_x_continuous(breaks = c(300,600,900,1200,1500,1800))+
ylim(-.7,2.3) +
#scale_y_continuous(breaks = c(0,0.5,1,1,5,2))+
scale_color_manual(values=c('darkslateblue', 'deeppink3')) +
scale_fill_manual(values=c('darkblue', 'deeppink3')) +
ylab("Est. Difference") +
xlab("Time (ms)") +
theme(legend.position = "none",
axis.text = element_text(face="bold", size=12),
axis.title = element_text(face="bold", size=15))
th_diff <- get_smooths_difference(interact_model,
Time,
list(GroupCondition = c("NormalHearing.real", "NormalHearing.MP")),
exclude_random = TRUE) %>%
ggplot(aes(Time, difference, group = group)) +
geom_hline(aes(yintercept=0), color='black',lty=2,size=1.5) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper, fill = sig_diff), alpha=.3) +
geom_line(aes(color=sig_diff), size=2) +
scale_x_continuous(breaks = c(300,600,900,1200,1500,1800))+
#scale_y_continuous(breaks = c(0,0.5,1,1.5,2))+
ylim(-.7,2.3)+
scale_color_manual(values=c('darkslateblue', 'deeppink3')) +
scale_fill_manual(values=c('darkslateblue', 'deeppink3')) +
theme(axis.title.y = element_blank()) +
xlab("Time (ms)")  +
theme(legend.position = "none",
axis.text = element_text(face="bold", size=12),
axis.title = element_text(face="bold", size=15))
diff_plots <- plot_grid(ci_diff, th_diff,
labels=c("Cochlear Implant", "Typical Hearing"),
nrow=1, align="h",
label_x = -.1)
interact_model_plot <-
get_gam_predictions(interact_model, # get the dataframe with fit and s.e. of fit
Time,
split = list(GroupCondition = c("Group", "Condition")),
exclude_random = TRUE) %>%
mutate(Group=recode(Group, "CochlearImplant"="Cochlear Implant", "NormalHearing" = "Typical Hearing"),
Condition = recode(Condition, "MP"="Mispronunciation", "real"="Correct pronunciation")) %>%
ggplot(aes(Time,elog)) +
geom_line(aes(color=Condition, linetype=Group),size=2) +
scale_linetype_manual(values=c(1,3)) +
geom_ribbon(aes(ymin=CI_lower, ymax=CI_upper, fill=Condition, group = .idx), alpha=0.3) +
xlab("Time (ms)")  +
ylab("Elog") +
scale_x_continuous(breaks = c(300,600,900,1200,1500,1800))+
theme(axis.text = element_text(face="bold", size=12),
axis.title = element_text(face="bold", size=15),
legend.title = element_text(face="bold",size=15))
contrasts(all_kids2$Condition.ord) <- "contr.treatment"
th_kids <- all_kids2 %>% filter(Group!='Cochlear Implant')
th_kids$start.event <- th_kids$Time == 300 # mark the beginning of each speaker's trajectory;
# where we start measuring at 300ms
# make sure the data are properly ordered and classified
th_kids <- th_kids %>%
arrange(ChildStudyID, Condition, WordGroup, Time) %>%
mutate(WordGroup=as.factor(WordGroup)) %>%
mutate(TargetWord=as.factor(TargetWord))
# fit a model with the data properly ordered
m1_th <- bam(elog ~ s(Time, bs="fs") +
s(Time, by=Condition.ord, bs='fs'),
data=th_kids, method="ML")
m_acf_th<- acf_resid(m1_th) # plot the autocorrelation and take a look at correlation between timepoints - yikes!
r1_th <- start_value_rho(m1_th) # first we calculate rho from the original model (wo ran. structure)
m_AR1_th <- bam(elog ~   s(Time, bs="fs") +
s(Time, by=Condition.ord, bs="fs"),
data=th_kids, method="fREML",
rho=r1_th, AR.start=start.event)
# we can plot the improvement here:
m_acf_rmv_th <- acf_resid(m_AR1_th) # took care of the problem!
all_kids2 %>%
filter(Group=='CochlearImplant') %>%
filter(CVC_hourly!='NA') %>%
mutate(quartile=ntile(CVC_hourly,4)) %>%
ggplot(., aes(Time, elog, color=Cond_Lab, fill=Cond_Lab,linetype=Cond_Lab)) +
geom_smooth(aes(group=factor(Cond_Lab)), stat="smooth", method="loess",alpha=.5, size=1) + # item level
facet_wrap(~quartile) +
labs(x = "Time", y = "Prop looks to target") +
theme(strip.text.x = element_text(size = 10, face='bold')) +
theme(axis.text=element_text(size=14),
axis.title=element_text(size=13, face='bold'),
title = element_text(size=14, face='bold')) +
ggtitle("Prop. looks to target by independent variable: \n Children with TH")
fvisgam(ppvt_model, view=c("Time","PPVT_GSV"), # the continuous variables
cond=list(Condition.ord=c("MP")),
main="Mispronunciation stimuli",
rm.ranef=FALSE)
contrasts(all_kids2$Condition.ord) <- "contr.treatment"
ci_kids <- all_kids2 %>% filter(Group=='CochlearImplant')
ci_kids$start.event <- ci_kids$Time == 300 # mark the beginning of each speaker's trajectory;
# where we start measuring at 300ms
# make sure the data are properly ordered and classified
ci_kids <- ci_kids %>%
arrange(ChildStudyID, Condition, WordGroup, Time) %>%
mutate(WordGroup=as.factor(WordGroup)) %>%
mutate(TargetWord=as.factor(TargetWord))
# fit a model with the data properly ordered
m1_ci <- bam(elog ~ s(Time, bs="fs") +
s(Time, by=Condition.ord, bs='fs'),
data=ci_kids, method="ML")
m_acf_ci<- acf_resid(m1_ci) # plot the autocorrelation and take a look at correlation between timepoints - yikes!
r1_ci <- start_value_rho(m1_ci) # first we calculate rho from the original model (wo ran. structure)
m_AR1_ci <- bam(elog ~   s(Time, bs="fs") +
s(Time, by=Condition.ord, bs="fs"),
data=ci_kids, method="fREML",
rho=r1_th, AR.start=start.event)
# we can plot the improvement here:
m_acf_rmv_ci <- acf_resid(m_AR1_ci) # took care of the problem!
ppvt_gfta_model <- th_kids %>%
bam(elog ~      Condition.ord +
s(Time) + # the reference: in this case, 'MP' which is the reference level we created
s(Time, by=Condition.ord) + # difference smooth (Real - MP
s(GFTA_Standard,k=22) +
s(Time, by=GFTA_Standard) +
te(Time,GFTA_Standard,by=Condition.ord) +
s(PPVT_GSV,k=20) +
s(Time, by=PPVT_GSV) +
te(Time,PPVT_GSV,by=Condition.ord) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, TargetWord, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1),
data=.,
rho=r1_th,
method="ML",
family="scat", # non-normally distributed residuals are corrected for here
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
saveRDS(ppvt_gfta_model, "../models/ppvt-gfta-model.Rdata")
gfta_model <- th_kids %>%
bam(elog ~       Condition.ord +
s(Time) + # the reference: in this case, 'MP' which is the reference level we created
s(Time, by=Condition.ord) + # difference smooth (Real - MP
s(GFTA_Standard,k=20) +
s(Time, by=GFTA_Standard) +
te(Time,GFTA_Standard,by=Condition.ord) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, TargetWord, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1),
data=.,
rho=r1_th,
method="fREML",
family="scat", # non-normally distributed residuals are corrected for here
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
ppvt_model <- th_kids %>%
bam(elog ~       Condition.ord +
s(Time) + # the reference: in this case, 'MP' which is the reference level we created
s(Time, by=Condition.ord) + # difference smooth (Real - MP
s(PPVT_GSV,k=22) +
s(Time, by=PPVT_GSV,k=20) +
te(Time,PPVT_GSV,by=Condition.ord) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, TargetWord, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1),
data=.,
rho=r1_th,
method="fREML",
family="scat", # non-normally distributed residuals are corrected for here
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
saveRDS(ppvt_model, "../models/th/ppvt-model.Rdata")
compareML(ppvt_model,ppvt_gfta_model)
ppvt_model <- th_kids %>%
bam(elog ~       Condition.ord +
s(Time) + # the reference: in this case, 'MP' which is the reference level we created
s(Time, by=Condition.ord) + # difference smooth (Real - MP
s(PPVT_GSV,k=22) +
s(Time, by=PPVT_GSV,k=20) +
te(Time,PPVT_GSV,by=Condition.ord) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, TargetWord, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1),
data=.,
rho=r1_th,
method="ML",
family="scat", # non-normally distributed residuals are corrected for here
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
ppvt_model <- th_kids %>%
bam(elog ~       Condition.ord +
s(Time) + # the reference: in this case, 'MP' which is the reference level we created
s(Time, by=Condition.ord) + # difference smooth (Real - MP
s(PPVT_GSV,k=22) +
s(Time, by=PPVT_GSV,k=20) +
te(Time,PPVT_GSV,by=Condition.ord) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, TargetWord, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1),
data=.,
rho=r1_th,
method="ML",
family="scat", # non-normally distributed residuals are corrected for here
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
ppvt_model <- th_kids %>%
bam(elog ~       Condition.ord +
s(Time) + # the reference: in this case, 'MP' which is the reference level we created
s(Time, by=Condition.ord) + # difference smooth (Real - MP
s(PPVT_GSV,k=22) +
s(Time, by=PPVT_GSV,k=20) +
te(Time,PPVT_GSV,by=Condition.ord) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, TargetWord, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1),
data=.,
rho=r1_th,
method="ML",
family="scat", # non-normally distributed residuals are corrected for here
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
ppvt_model <- th_kids %>%
bam(elog ~       Condition.ord +
s(Time) + # the reference: in this case, 'MP' which is the reference level we created
s(Time, by=Condition.ord) + # difference smooth (Real - MP
s(PPVT_GSV,k=22) +
s(Time, by=PPVT_GSV,k=20) +
te(Time,PPVT_GSV,by=Condition.ord) +
s(Time, ChildStudyID, bs='fs', m=1) +
s(Time, TargetWord, bs='fs', m=1) +
s(Time, ChildStudyID, by=Condition.ord, bs='fs', m=1),
data=.,
rho=r1_th,
method="ML",
family="scat", # non-normally distributed residuals are corrected for here
discrete=TRUE,
nthreads=4,
select=T, # impose penalties
AR.start=start.event)
setwd('/Users/megcychosz/Google Drive/CI_mispron/CI_mispron/')
